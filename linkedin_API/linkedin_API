
  

const express = require('express');
const { MongoClient } = require('mongodb');

const app = express();
const port = 4020;

const uri = "mongodb://127.0.0.1:27017";
const dbName = "linkedin";

app.use(express.json());

let db, users, messages, posts, connections;

async function initializeDatabase() {
    try {
        const client = await MongoClient.connect(uri, { useUnifiedTopology: true });
        console.log("Connected to MongoDB");

        db = client.db(dbName);
        users = db.collection("users"); // Correct method to access collections
        connections = db.collection("connections");
        messages = db.collection("messages");
        posts = db.collection("posts");

        // Start server after successful DB connection
        app.listen(port, () => {
            console.log(`Server running at http://localhost:${port}`);
        });
    } catch (err) {
        console.error("Error connecting to MongoDB:", err);
        process.exit(1); // Exit if database connection fails
    }
}

// Initialize Database
initializeDatabase();

// GET: List all Users
app.get('/users', async (req, res) => {
    try {
        const usersData = await users.find({}).toArray();
        res.json(usersData);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Error fetching users" });
    }
});

// GET: Fetch a specific user
app.get('/users/:userId', async (req, res) => {
    try {
        const userId = req.params.userId;
        const result = await users.findOne({ userId }); // Assuming `userId` is a field in the document
        if (result) {
            res.status(200).json(result);
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error fetching user" });
    }
});


// POST: Add a new user
app.post('/users', async (req, res) => {
    try {
        // console.log("request Object : ",req); 
        // console.log("requestBody : ",req.body);
        const user = req.body;
        const result = await users.insertOne(user);
        res.status(201).send(`course added with ID: ${result.insertedId}`);
    } catch (err) {
        res.status(500).send("Error adding student: " + err.message);
    }
});


// PATCH: Partially  Update user headline
app.patch('/users/:userId', async (req, res) => {
    try {
        const userId = (req.params);
        const updates = req.body;
        const result = await users.updateOne( userId , { $set: updates });
        res.status(200).send(`${result.modifiedCount} document(s) updated`);
    } catch (err) {
        res.status(500).send("Error partially updating student: " + err.message);
    }
});


// DELETE: Delete a user
app.delete('/users/:userId', async (req, res) => {
    try {
        const userId = (req.params.userId);
        const result = await users.deleteOne({userId});
        res.status(200).send(`${result.deletedCount} document(s) deleted`);
    } catch (err) {
        res.status(500).send("Error deleting student: " + err.message);
    }
});


// connections


// GET: Fetch all connections for a user
app.get('/connections/:userId', async (req, res) => {
    try {
        const user1 = req.params.userId;
        const result = await connections.findOne({ user1 });
        if (result) {
            res.status(200).json(result);
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error fetching user" });
    }
});

// POST: Send a connection request
app.post('/connections', async (req, res) => {
    try {
      
        const connection = req.body;
        const result = await connections.insertOne(connection);
        res.status(201).send(`course added with ID: ${result.insertedId}`);
    } catch (err) {
        res.status(500).send("Error adding student: " + err.message);
    }
});

// PATCH: Accept a connection request
app.patch('/connections/:connectionId', async (req, res) => {
    try {
        const connectionId = (req.params);
        const updates = req.body;
        const result = await connections.updateOne( connectionId , { $set: updates });
        res.status(200).send(`${result.modifiedCount} document(s) updated`);
    } catch (err) {
        res.status(500).send("Error partially updating student: " + err.message);
    }
});

// DELETE: Remove a connection
app.delete('/connections/:connectionId', async (req, res) => {
    try {
        const connectionId = (req.params.connectionId);
        const result = await connections.deleteOne({connectionId});
        res.status(200).send(`${result.deletedCount} document(s) deleted`);
    } catch (err) {
        res.status(500).send("Error deleting student: " + err.message);
    }
});


// Posts


// GET: Fetch all posts
app.get('/posts', async (req, res) => {
    try {
        const post = await posts.find({}).toArray();
        res.json(post);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "Error fetching users" });
    }
});

// GET:Fetch a specific post
app.get('/posts/:postId', async (req, res) => {
    try {
        const postId = req.params.postId;
        const result = await posts.findOne({ postId }); // Assuming `userId` is a field in the document
        if (result) {
            res.status(200).json(result);
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error fetching user" });
    }
});


// POST: Create a new post.
app.post('/posts', async (req, res) => {
    try {
      
        const { postId, userId, content } = req.body;

         // Validate the input
         if (!postId || !userId || !content) {
            return res.status(400).json({ message: "postId, userId, and content are required" });
        }

         // Create the post object with a timestamp
         const newPost = {
            postId,
            userId,
            content,
            likes: 0, // Default likes count
            createdAt: new Date() // Add timestamp
        };
        const result = await posts.insertOne(newPost);

        if (result.acknowledged) {
            res.status(201).json({
                message: "Post created successfully",
                post: { ...newPost, _id: result.insertedId } // Return the created post
            });
        } else {
            res.status(500).json({ message: "Failed to create post" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error creating post", error: err.message });
    }
});

// PATCH: Add a like to a post
app.patch('/posts/:postId/likes', async (req, res) => {
    try {
        const postId = (req.params);
        const updates = req.body;
        const result = await posts.updateOne( postId , { $inc: updates });
        res.status(200).send(`${result.modifiedCount} document(s) updated`);
    } catch (err) {
        res.status(500).send("Error partially updating student: " + err.message);
    }
});


// DELETE:Delete a post
app.delete('/posts/:postId', async (req, res) => {
    try {
        const postId = (req.params.postId);
        const result = await posts.deleteOne({postId});
        res.status(200).send(`${result.deletedCount} document(s) deleted`);
    } catch (err) {
        res.status(500).send("Error deleting student: " + err.message);
    }
});


// Messages

// GET:Fetch messages for a user
app.get('/messages/:userId', async (req, res) => {
    try {
        const userId = req.params.userId;
        const result = await messages.findOne({ to:userId }); // Assuming `userId` is a field in the document
        if (result) {
            res.status(200).json(result);
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error fetching user" });
    }
});



// POST: Send a message
app.post('/messages', async (req, res) => {
    try {
        const { messageId, from, to, content } = req.body;

        // Validate the input
        if (!messageId || !from || !to || !content) {
            return res.status(400).json({ message: "messageId, from, to, and content are required" });
        }

        // Create the message object with a timestamp
        const newMessage = {
            messageId,
            from,
            to,
            content,
            sentAt: new Date() // Current timestamp
        };

        // Insert the message into the "messages" collection
        const result = await messages.insertOne(newMessage);

        if (result.acknowledged) {
            res.status(201).json({
                message: "Message sent successfully",
                messageDetails: { ...newMessage, _id: result.insertedId } // Include MongoDB-assigned ID in the response
            });
        } else {
            res.status(500).json({ message: "Failed to send message" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error sending message", error: err.message });
    }
});


// DELETE:Delete a message
app.delete('/messages/:messageId', async (req, res) => {
    try {
        const messageId = (req.params.messageId);
        const result = await messages.deleteOne({messageId});
        res.status(200).send(`${result.deletedCount} document(s) deleted`);
    } catch (err) {
        res.status(500).send("Error deleting student: " + err.message);
    }
});


// miscellaneous


// GET:Fetch messages for a user
app.get('/users/:userId/profile-views', async (req, res) => {
    try {
        const userId = req.params.userId;
        const result = await users.findOne({ userId:userId },{profileViews: 1}); 
        if (result) {
            res.status(200).json(result);
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error fetching user" });
    }
});

// PUT: Add a skill to a user
app.put('/users/:userId/skills', async (req, res) => {
    try {
        const { userId } = req.params; // Get userId from URL parameters
        const { skill } = req.body; // Get the skill from request body
        console.log(skill);
        console.log(userId);
        // Validate input
        if (!userId) {
            return res.status(400).json({ message: "userId is required" });
        }
        if (!skill) {
            return res.status(400).json({ message: "Skill is required" });
        }

        // Add the skill to the user's skills array using $push
        const result = await users.updateOne(
            { userId }, // Find user by userId
            { $push: skill } // Push skill to skills array
        );

        if (result.matchedCount === 1) {
            res.status(200).json({ message: "Skill added successfully" });
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error("Error adding skill:", err);
        res.status(500).json({ message: "Error adding skill", error: err.message });
    }
});


// PATCH: Upgrade to premium account
app.patch('/users/:userId/premium', async (req, res) => {
    try {
        const { userId } = req.params; // Get userId from URL parameters

        // Validate input
        if (!userId) {
            return res.status(400).json({ message: "userId is required" });
        }

        // Upgrade the user to premium
        const result = await users.updateOne(
            { userId }, // Find user by userId
            { $set: { isPremium: true } } // Set isPremium to true
        );

        if (result.matchedCount === 1) {
            res.status(200).json({ message: "User upgraded to premium successfully" });
        } else {
            res.status(404).json({ message: "User not found" });
        }
    } catch (err) {
        console.error("Error upgrading to premium:", err);
        res.status(500).json({ message: "Error upgrading to premium", error: err.message });
    }
});
